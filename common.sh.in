#

# Copyright (C) 2007, 2008, 2009, 2012 Google Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

CLEANUP=( )

declare -ri ONE_KIB=1024
declare -ri ONE_MIB=$ONE_KIB*1024
declare -ri ONE_GIB=$ONE_MIB*1024

log_error() {
  echo "$@" >&2
}

get_api10_arguments() {
  if [ -z "$INSTANCE_NAME" -o -z "$HYPERVISOR" -o -z "$DISK_COUNT" ]; then
    log_error "Missing OS API Variable:"
    log_error "(INSTANCE_NAME HYPERVISOR or DISK_COUNT)"
    exit 1
  fi
  instance=$INSTANCE_NAME
  if [ $DISK_COUNT -lt 1 -o -z "$DISK_0_PATH" ]; then
    log_error "At least one disk is needed"
    exit 1
  fi
  if [ "$SCRIPT_NAME" = "export" ]; then
    if [ -z "$EXPORT_DEVICE" ]; then
      log_error "Missing OS API Variable EXPORT_DEVICE"
    fi
    blockdev=$EXPORT_DEVICE
  elif [ "$SCRIPT_NAME" = "import" ]; then
    if [ -z "$IMPORT_DEVICE" ]; then
       log_error "Missing OS API Variable IMPORT_DEVICE"
    fi
    blockdev=$IMPORT_DEVICE
  else
    blockdev=$DISK_0_PATH
  fi
  if [ "$SCRIPT_NAME" = "rename" -a -z "$OLD_INSTANCE_NAME" ]; then
    log_error "Missing OS API Variable OLD_INSTANCE_NAME"
  fi
  old_name=$OLD_INSTANCE_NAME
}

check_empty_sizes() {
  # Check is there are more than 2 empty OSP_*_SIZE.
  if [ -z "$OSP_ROOT_SIZE" -a -z "$OSP_SWAP_SIZE" ]; then
    echo "Only one of root_size and swap_size can be empty."
    exit 1
  fi

  if [ -z "$OSP_ROOT_SIZE" -a -z "$OSP_VAR_SIZE" ]; then
    echo "Only one of root_size and var_size can be empty."
    exit 1
  fi

  if [ -z "$OSP_SWAP_SIZE" -a -z "$OSP_VAR_SIZE" ]; then
    echo "Only one of swap_size and var_size can be empty."
    exit 1
  fi
}

check_minimal_sizes() {
  # Check minimal sizes
  if [ -n "$OSP_ROOT_SIZE" -a "$OSP_ROOT_SIZE" -lt "$ROOT_MIN_SIZE" ]; then
    echo "root FS size must be greater than ${ROOT_MIN_SIZE}MiB."
    exit 1
  fi

  if [ -n "$OSP_SWAP_SIZE" -a "$OSP_SWAP_SIZE" -lt "$SWAP_MIN_SIZE" ]; then
    echo "swap size must be greater than ${SWAP_MIN_SIZE}MiB."
    exit 1
  fi

  if [ -n "$OSP_VAR_SIZE" -a "$OSP_VAR_SIZE" -lt "$VAR_MIN_SIZE" ]; then
    echo "var FS size must be greater than ${VAR_MIN_SIZE}MiB."
    exit 1
  fi
}

format_disk0() {
  blockdev="$1"

  # PARTITION_ALIGNMENT is in sectors, converting it to bytes.
  PA_BYTES=$((PARTITION_ALIGNMENT*512))

  ROOT_START=$((PA_BYTES))
  ROOT_END=$((ROOT_START+ROOT_SIZE*ONE_MIB-1))
  SWAP_START=$((ROOT_START+1))
  SWAP_END=$((SWAP_START+SWAP_SIZE*ONE_MIB-1))
  VAR_START=$((SWAP_END+1))
  VAR_END=$((VAR_START+VAR_SIZE*ONE_MIB-1))

  $PARTED $blockdev <<EOF
unit B
mkpart primary $ROOT_START $ROOT_END
set 1 boot on
mkpart primary $SWAP_START $SWAP_END
mkpart primary $VAR_START $VAR_END
EOF
}

map_disk0() {
  blockdev="$1"

  # Find device base names.
  rootdev_base=`kpartx -l -p- $blockdev | \
                grep -m 1 -- "-1.*$blockdev" | \
                awk '{print $1}'`
  swapdev_base=`kpartx -l -p- $blockdev | \
                grep -m 1 -- "-2.*$blockdev" | \
                awk '{print $1}'`
  vardev_base=`kpartx -l -p- $blockdev | \
               grep -m 1 -- "-3.*$blockdev" | \
               awk '{print $1}'`

  # Check *dev_base validity.
  if [ -z "$rootdev_base" -o -z "$swapdev_base" -o -z "$vardev_base" ]; then
    log_error "Cannot interpret kpartx output and get partition mapping"
    exit 1
  fi

  # Map devices.
  kpartx -a -s -p- $blockdev > /dev/null

  # Set device paths.
  for dev in rootdev swapdev vardev; do
    eval $dev="/dev/mapper/\$"$dev"_base"
  done

  # Check mapped devices.
  for dev in $rootdev $swapdev $vardev; do
    if [ ! -b "$dev" -o ]; then
      log_error "Can't find kpartx mapped partition: $dev"
      exit 1
    fi
  done

  # Display evaluable variable assignation on stdout
  for dev in rootdev swapdev vardev; do
    eval echo $dev="\$$dev"
  done
}

unmap_disk0() {
  kpartx -d -p- $1
}

cleanup() {
  if [ ${#CLEANUP[*]} -gt 0 ]; then
    LAST_ELEMENT=$((${#CLEANUP[*]}-1))
    REVERSE_INDEXES=$(seq ${LAST_ELEMENT} -1 0)
    for i in $REVERSE_INDEXES; do
      ${CLEANUP[$i]}
    done
  fi
}

trap cleanup EXIT

DEFAULT_FILE="@sysconfdir@/default/ganeti-instance-debootstrap"
if [ -f "$DEFAULT_FILE" ]; then
    . "$DEFAULT_FILE"
fi

# note: we don't set a default mirror since debian and ubuntu have
# different defaults, and it's better to use the default

# only if the user want to specify a mirror in the defaults file we
# will use it, this declaration is to make sure the variable is set
: ${MIRROR:=""}
: ${PROXY:=""}
: ${SUITE:="wheezy"}
: ${ARCH:=""}
: ${EXTRA_PKGS:=""}
: ${COMPONENTS:=""}
: ${CUSTOMIZE_DIR:="@sysconfdir@/ganeti/instance-debootstrap/hooks"}
: ${VARIANTS_DIR:="@sysconfdir@/ganeti/instance-debootstrap/variants"}
: ${GENERATE_CACHE:="yes"}
: ${CLEAN_CACHE:="14"} # number of days to keep a cache file
: ${PARTITION_ALIGNMENT:=2048} # sectors to align partition (1Mib default)
: ${PARTITION_STYLE:="gpt"} # disk partition style
: ${OSP_ROOT_FS:="ext4"}
: ${OSP_ROOT_SIZE:="5120"} # 5GiB
: ${OSP_SWAP_SIZE:="1024"} # 1GiB
: ${OSP_VAR_FS:="ext4"}
: ${OSP_VAR_SIZE:=""} # Rest of disk if empty
: ${ROOT_MIN_SIZE:="5120"} # 5GiB
: ${SWAP_MIN_SIZE:="1024"} # 1GiB
: ${VAR_MIN_SIZE:="100"} # 100MiB

CACHE_DIR="@localstatedir@/cache/ganeti-instance-debootstrap"

SCRIPT_NAME=$(basename $0)

if [ -f /sbin/blkid -a -x /sbin/blkid ]; then
  VOL_ID="/sbin/blkid -o value -s UUID"
  VOL_TYPE="/sbin/blkid -o value -s TYPE"
else
  for dir in /lib/udev /sbin; do
    if [ -f $dir/vol_id -a -x $dir/vol_id ]; then
      VOL_ID="$dir/vol_id -u"
      VOL_TYPE="$dir/vol_id -t"
    fi
  done
fi

if [ -z "$VOL_ID" ]; then
  log_error "vol_id or blkid not found, please install udev or util-linux"
  exit 1
fi

PARTED=$(which parted 2>/dev/null || true)
if [ -z "$PARTED" ]; then
  log_error "parted not found, please install it."
  exit 1
fi

if [ -z "$OS_API_VERSION" -o "$OS_API_VERSION" = "5" ]; then
  log_error "API v5 is not supported."
  exit 1
elif [ "$OS_API_VERSION" = "10" -o "$OS_API_VERSION" = "15" -o \
       "$OS_API_VERSION" = "20" ]; then
  get_api10_arguments
else
  log_error "Unknown OS API VERSION $OS_API_VERSION"
  exit 1
fi

if [ -n "$OS_VARIANT" ]; then
  if [ ! -d "$VARIANTS_DIR" ]; then
    log_error "OS Variants directory $VARIANTS_DIR doesn't exist"
    exit 1
  fi
  VARIANT_CONFIG="$VARIANTS_DIR/$OS_VARIANT.conf"
  if [ -f "$VARIANT_CONFIG" ]; then
    . "$VARIANT_CONFIG"
  else
    if grep -qxF "$OS_VARIANT" variants.list; then
      log_error "ERROR: instance-debootstrap configuration error"
      log_error "  Published variant $OS_VARIANT is missing its config file"
      log_error "  Please create $VARIANT_CONFIG or unpublish the variant"
      log_error "  (by removing $OS_VARIANT from variants.list)"
    else
      log_error "Unofficial variant $OS_VARIANT is unsupported"
      log_error "Most probably this is a user error, forcing a wrong name"
      log_error "To support this variant please create file $VARIANT_CONFIG"
    fi
    exit 1
  fi
fi
